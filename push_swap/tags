!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFFER_SIZE	libft/includes/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC		= gcc$/;"	m
CC	libft/Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g -fsanitize=address -fno-omit-frame-pointer$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
FT_PRINTF_H	libft/includes/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_NEXT_LINE_H	libft/includes/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
LIBFT_H	libft/includes/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME = push_swap$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = ${SRCS:.c=.o}$/;"	m
OBJS	libft/Makefile	/^OBJS = ${SRCS_LIBFT:.c=.o} ${SRCS_LSTCHAINE:.c=.o} ${SRCS_PRINTF:.c=.o} ${SRCS_GNL:.c=.o} \\$/;"	m
PUSH_SWAP_H	push_swap.h	/^# define PUSH_SWAP_H$/;"	d
RM	Makefile	/^RM		= rm -f$/;"	m
RM	libft/Makefile	/^RM		= rm -f$/;"	m
SRCS	Makefile	/^SRCS = 			errors_checker.c \\$/;"	m
SRCS_GNL	libft/Makefile	/^SRCS_GNL = 			get_next_line\/get_next_line.c \\$/;"	m
SRCS_LIBFT	libft/Makefile	/^SRCS_LIBFT = 		libft\/ft_memset.c \\$/;"	m
SRCS_LSTTCHAINE	libft/Makefile	/^SRCS_LSTTCHAINE = 	libft\/ft_lstnew.c \\$/;"	m
SRCS_PRINTF	libft/Makefile	/^SRCS_PRINTF = 		ft_printf\/ft_printf.c \\$/;"	m
check	tests/test_true_false.c	/^bool check(int a, int b)$/;"	f
check_errors	libft/get_next_line/get_next_line.c	/^int	check_errors(int fd, char **line)$/;"	f
check_if_sorted_and_exit	push_swap.c	/^void	check_if_sorted_and_exit(t_stack	*s, int size)$/;"	f
cmp	sort_list.c	/^int cmp(int a, int b)$/;"	f
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	push_swap.h	/^    int                 content;$/;"	m	struct:s_stack
create_nextline	libft/get_next_line/get_next_line.c	/^char	*create_nextline(char *result, char *line)$/;"	f
create_result	libft/get_next_line/get_next_line.c	/^char	*create_result(char *line)$/;"	f
create_stack_a	init_stack_a.c	/^t_stack *create_stack_a(char **av, t_stack **a)$/;"	f
error_msg_stop	error_msg.c	/^void    error_msg_stop(void)$/;"	f
find_lastnode	nodes_ops.c	/^t_stack *find_lastnode(t_stack **head)$/;"	f
find_max_index	tests/test_max_min_index.c	/^int find_max_index(t_stack *s)$/;"	f
free_list	free_ops.c	/^void    free_list(t_stack **s)$/;"	f
free_string	free_ops.c	/^void    free_string(char **str)$/;"	f
frontadd_push_op	push_ops.c	/^void	frontadd_push_op(t_stack **s1, t_stack **s2)$/;"	f
ft_abs	libft/libft/ft_itoa_base.c	/^int		ft_abs(int nb)$/;"	f
ft_atoi	libft/libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi_base	libft/libft/ft_atoi_base.c	/^int	ft_atoi_base(const char *str, int str_base)$/;"	f
ft_bzero	libft/libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_calloc_count	libft/get_next_line/get_next_line_utils.c	/^char	*ft_calloc_count(int count)$/;"	f
ft_count_int	libft/ft_printf/ft_count_int.c	/^int	ft_count_int(int n)$/;"	f
ft_count_nbchar	libft/libft/ft_itoa.c	/^size_t	ft_count_nbchar(int n)$/;"	f
ft_count_nbsubstr	libft/libft/ft_split.c	/^size_t	ft_count_nbsubstr(const char *s, char c)$/;"	f
ft_count_unsigned_int	libft/ft_printf/ft_count_unsigned_int.c	/^int	ft_count_unsigned_int(unsigned int n)$/;"	f
ft_format_specifier	libft/ft_printf/ft_printf.c	/^void	ft_format_specifier(char format, va_list ap, int *count)$/;"	f
ft_isalnum	libft/libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	libft/libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_itoa_base	libft/libft/ft_itoa_base.c	/^char	*ft_itoa_base(int value, int base)$/;"	f
ft_join	libft/get_next_line/get_next_line_utils.c	/^char	*ft_join(char *line, char *buffer)$/;"	f
ft_lstadd_back	libft/libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstiter	libft/libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libft/libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_nb_char_substr	libft/libft/ft_split.c	/^unsigned int	ft_nb_char_substr(char const *s, char c, unsigned int start)$/;"	f
ft_nb_is_negative	libft/libft/ft_itoa.c	/^char	*ft_nb_is_negative(int n, char *itoa_str, size_t nb_char)$/;"	f
ft_nb_is_positive	libft/libft/ft_itoa.c	/^char	*ft_nb_is_positive(int n, char *itoa_str, size_t nb_char)$/;"	f
ft_pa	push_ops.c	/^void	ft_pa(t_stack **a, t_stack **b)$/;"	f
ft_pb	push_ops.c	/^void	ft_pb(t_stack **a, t_stack **b)$/;"	f
ft_printf	libft/ft_printf/ft_printf.c	/^int	ft_printf(const char *last, ...)$/;"	f
ft_printf_address	libft/ft_printf/ft_printf_address.c	/^void	ft_printf_address(uintptr_t n, int fd, int *count)$/;"	f
ft_printf_char	libft/ft_printf/ft_printf_char.c	/^void	ft_printf_char(char c, int fd, int *count)$/;"	f
ft_printf_hexa	libft/ft_printf/ft_printf_hexa.c	/^void	ft_printf_hexa(unsigned int n, int fd, int *count, char c)$/;"	f
ft_printf_int	libft/ft_printf/ft_printf_int.c	/^void	ft_printf_int(int n, int fd, int *count)$/;"	f
ft_printf_str	libft/ft_printf/ft_printf_str.c	/^void	ft_printf_str(char *s, int fd, int *count)$/;"	f
ft_printf_unsint	libft/ft_printf/ft_printf_unsint.c	/^void	ft_printf_unsint(unsigned int n, int fd, int *count)$/;"	f
ft_put_hexanbr_fd	libft/ft_printf/ft_put_hexanbr_fd.c	/^void	ft_put_hexanbr_fd(unsigned int n, int fd, int *count)$/;"	f
ft_put_int	libft/ft_printf/ft_put_int.c	/^int	ft_put_int(int n, int fd, int *count)$/;"	f
ft_put_uintptr_fd	libft/ft_printf/ft_printf_address.c	/^void	ft_put_uintptr_fd(uintptr_t n, int fd, int *count)$/;"	f
ft_put_unsnbr_fd	libft/ft_printf/ft_put_unsnbr_fd.c	/^void	ft_put_unsnbr_fd(unsigned int n, int fd)$/;"	f
ft_putchar_fd	libft/libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_ra	rotate_ops.c	/^void	ft_ra(t_stack **a)$/;"	f
ft_rb	rotate_ops.c	/^void	ft_rb(t_stack **b)$/;"	f
ft_rr	rotate_ops.c	/^void	ft_rr(t_stack **a, t_stack **b)$/;"	f
ft_rra	rev_rotate_ops.c	/^void	ft_rra(t_stack **a)$/;"	f
ft_rrb	rev_rotate_ops.c	/^void	ft_rrb(t_stack **b)$/;"	f
ft_rrr	rev_rotate_ops.c	/^void	ft_rrr(t_stack **a, t_stack **b)$/;"	f
ft_sa	swap_ops.c	/^void	ft_sa(t_stack **a)$/;"	f
ft_sb	swap_ops.c	/^void	ft_sb(t_stack **b)$/;"	f
ft_split	libft/libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_ss	swap_ops.c	/^void	ft_ss(t_stack **a, t_stack **b)$/;"	f
ft_start_index_substr	libft/libft/ft_split.c	/^unsigned int	ft_start_index_substr(char const *s, char c, unsigned int start)$/;"	f
ft_strchr	libft/libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcpy	libft/libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdup	libft/libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libft/libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen_int	libft/get_next_line/get_next_line_utils.c	/^int	ft_strlen_int(const char *string)$/;"	f
ft_strmapi	libft/libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnstr	libft/libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_next_line	libft/get_next_line/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_next_line_maxopen	libft/get_next_line/get_next_line_bonus.c	/^char	*get_next_line_maxopen(int fd)$/;"	f
index_sorted	push_swap.h	/^    int                 index_sorted;$/;"	m	struct:s_stack
init_stack_a	init_stack_a.c	/^t_stack *init_stack_a(char **str)$/;"	f
main	libft/test.c	/^int	main(void)$/;"	f
main	tests/check_for_doubles.c	/^int	main(int argc, char *argv[])$/;"	f
main	tests/ft_checker_intMax_intMin.c	/^int	main(int argc, char *argv[])$/;"	f
main	tests/ft_printf_test.c	/^int main(void)$/;"	f
main	tests/test.c	/^int	main(int argc, char *argv[])$/;"	f
main	tests/test_atoi.c	/^int	main(int ac, char **av)$/;"	f
main	tests/test_binary.c	/^int	main(int ac, char **av)$/;"	f
main	tests/test_ft_atoi_base.c	/^int	main(int ac, char **av)$/;"	f
main	tests/test_ft_printf.c	/^int	main(void)$/;"	f
main	tests/test_max_min_index.c	/^int	main(int ac, char **av)$/;"	f
main	tests/test_operations.c	/^int	main(int ac, char*av[])$/;"	f
main	tests/test_true_false.c	/^int	main(void)$/;"	f
max	libft/libft/max.c	/^int	max(int *tab, unsigned int len)$/;"	f
multiple_string	push_swap.h	/^# define multiple_string /;"	d
new_node	init_stack_a.c	/^t_stack *new_node(char *str)$/;"	f
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	push_swap.h	/^    struct s_stack      *next;$/;"	m	struct:s_stack	typeref:struct:s_stack::s_stack
no_doubles	errors_checker.c	/^void no_doubles(char **str)$/;"	f
no_errors	errors_checker.c	/^void no_errors(char **str)$/;"	f
no_int_errors	errors_checker.c	/^void no_int_errors(char **str)$/;"	f
no_other_char	errors_checker.c	/^void no_other_char(char **str)$/;"	f
node_backadd	init_stack_a.c	/^void    node_backadd(t_stack **head, t_stack **new_node)$/;"	f
one_num	push_swap.h	/^# define one_num /;"	d
one_str_mult_num	push_swap.h	/^# define one_str_mult_num /;"	d
one_string_case	prepare_string.c	/^bool one_string_case(char *av)$/;"	f
power	libft/libft/power.c	/^int	power(int str_base, int power)$/;"	f
prepare_forstash	libft/get_next_line/get_next_line_utils.c	/^void	prepare_forstash(char **line, char **buffer)$/;"	f
prepare_stack_a	init_stack_a.c	/^t_stack *prepare_stack_a(char **av)$/;"	f
print_index	push_swap.c	/^void	print_index(t_stack *a)$/;"	f
print_message	tests/test_operations.c	/^void	print_message(t_stack *a, t_stack *b)$/;"	f
print_stack	push_swap.c	/^void	print_stack(t_stack *a)$/;"	f
push_op	push_ops.c	/^void	push_op(t_stack **s1, t_stack **s2)$/;"	f
read_fd	libft/get_next_line/get_next_line.c	/^char	*read_fd(char *line, int fd, int *error)$/;"	f
rev_rotate	rev_rotate_ops.c	/^void	rev_rotate(t_stack **s)$/;"	f
rotate_op	rotate_ops.c	/^void	rotate_op(t_stack **s)$/;"	f
s_list	libft/includes/libft.h	/^typedef struct s_list$/;"	s
s_stack	push_swap.h	/^typedef struct  s_stack$/;"	s
short_sorting	push_swap.c	/^void	short_sorting(t_stack **a)$/;"	f
sort_index	sort_int_tab.c	/^void    sort_index(t_stack **head)$/;"	f
sort_int_tab	sort_int_tab.c	/^void sort_int_tab(int **tab, unsigned int size)$/;"	f
sort_list	sort_list.c	/^t_stack	*sort_list(t_stack *s, int (*cmp)(int, int))$/;"	f
sort_three	push_swap.c	/^void	sort_three(t_stack **s)$/;"	f
stack_size	nodes_ops.c	/^int stack_size(t_stack *ptr)$/;"	f
string_case	prepare_string.c	/^int string_case(char **av)$/;"	f
swap_op	swap_ops.c	/^void	swap_op(t_stack **s)$/;"	f
t_list	libft/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_stack	push_swap.h	/^}                       t_stack;$/;"	t	typeref:struct:s_stack
there_is_n	libft/get_next_line/get_next_line_utils.c	/^int	there_is_n(char *line)$/;"	f
transform	libft/libft/ft_atoi_base.c	/^int	transform(char c)$/;"	f
